"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./components/infinite-pannable-grid.tsx":
/*!***********************************************!*\
  !*** ./components/infinite-pannable-grid.tsx ***!
  \***********************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   InfinitePannableGrid: () => (/* binding */ InfinitePannableGrid)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var next_navigation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/navigation */ \"(app-pages-browser)/./node_modules/next/dist/api/navigation.js\");\n/* harmony import */ var _components_floating_grid_image__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/components/floating-grid-image */ \"(app-pages-browser)/./components/floating-grid-image.tsx\");\n/* __next_internal_client_entry_do_not_use__ InfinitePannableGrid auto */ \nvar _s = $RefreshSig$();\n\n\n\nconst CELL_SIZE = 220;\nconst GRID_COLS = 5;\nconst VIEWPORT_BUFFER = 2;\nconst DRAG_THRESHOLD = 8; // px before we start panning\nfunction InfinitePannableGrid(param) {\n    let { images } = param;\n    _s();\n    const router = (0,next_navigation__WEBPACK_IMPORTED_MODULE_2__.useRouter)();\n    const containerRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const [panOffset, setPanOffset] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        x: 0,\n        y: 0\n    });\n    const [isPanning, setIsPanning] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    // For drag/click intent\n    const dragStart = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    // Center grid on mount\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"InfinitePannableGrid.useEffect\": ()=>{\n            if (containerRef.current) {\n                const { clientWidth, clientHeight } = containerRef.current;\n                setPanOffset({\n                    x: Math.round(clientWidth / 2),\n                    y: Math.round(clientHeight / 2)\n                });\n            }\n        }\n    }[\"InfinitePannableGrid.useEffect\"], []);\n    const getVisibleIndices = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"InfinitePannableGrid.useCallback[getVisibleIndices]\": ()=>{\n            if (!containerRef.current) return {\n                minRow: 0,\n                maxRow: 0,\n                minCol: 0,\n                maxCol: 0\n            };\n            const { clientWidth, clientHeight } = containerRef.current;\n            const minCol = Math.floor((-panOffset.x - VIEWPORT_BUFFER * CELL_SIZE) / CELL_SIZE);\n            const maxCol = Math.floor((-panOffset.x + clientWidth + VIEWPORT_BUFFER * CELL_SIZE) / CELL_SIZE);\n            const minRow = Math.floor((-panOffset.y - VIEWPORT_BUFFER * CELL_SIZE) / CELL_SIZE);\n            const maxRow = Math.floor((-panOffset.y + clientHeight + VIEWPORT_BUFFER * CELL_SIZE) / CELL_SIZE);\n            return {\n                minRow,\n                maxRow,\n                minCol,\n                maxCol\n            };\n        }\n    }[\"InfinitePannableGrid.useCallback[getVisibleIndices]\"], [\n        panOffset\n    ]);\n    // Only start panning if moved > threshold\n    const handlePointerDown = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"InfinitePannableGrid.useCallback[handlePointerDown]\": (e)=>{\n            if (e.pointerType === \"mouse\" && e.button !== 0) return;\n            dragStart.current = {\n                x: e.clientX,\n                y: e.clientY,\n                panX: panOffset.x,\n                panY: panOffset.y\n            };\n            setIsPanning(false); // Not panning until moved enough\n        }\n    }[\"InfinitePannableGrid.useCallback[handlePointerDown]\"], [\n        panOffset\n    ]);\n    const handlePointerMove = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"InfinitePannableGrid.useCallback[handlePointerMove]\": (e)=>{\n            if (!dragStart.current) return;\n            const dx = e.clientX - dragStart.current.x;\n            const dy = e.clientY - dragStart.current.y;\n            const distance = Math.sqrt(dx * dx + dy * dy);\n            if (!isPanning && distance > DRAG_THRESHOLD) {\n                setIsPanning(true);\n            }\n            if (isPanning) {\n                setPanOffset({\n                    x: dragStart.current.panX + dx,\n                    y: dragStart.current.panY + dy\n                });\n            }\n        }\n    }[\"InfinitePannableGrid.useCallback[handlePointerMove]\"], [\n        isPanning\n    ]);\n    const handlePointerUp = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"InfinitePannableGrid.useCallback[handlePointerUp]\": ()=>{\n            dragStart.current = null;\n            setIsPanning(false);\n        }\n    }[\"InfinitePannableGrid.useCallback[handlePointerUp]\"], []);\n    // The magic: let the image's onClick fire instantly (unless you were panning)\n    const handleImageClick = (slug)=>{\n        if (!isPanning) {\n            router.push(\"/image/\".concat(slug));\n        }\n    // If was panning, do nothing (don't open detail)\n    };\n    const renderedCells = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)({\n        \"InfinitePannableGrid.useMemo[renderedCells]\": ()=>{\n            if (images.length === 0) return [];\n            const { minRow, maxRow, minCol, maxCol } = getVisibleIndices();\n            const cells = [];\n            for(let row = minRow; row <= maxRow; row++){\n                for(let col = minCol; col <= maxCol; col++){\n                    const idx = Math.abs(row * GRID_COLS + col) % images.length;\n                    const img = images[idx];\n                    cells.push(/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_floating_grid_image__WEBPACK_IMPORTED_MODULE_3__.FloatingGridImage, {\n                        src: img.imageUrl,\n                        alt: img.name,\n                        style: {\n                            transform: \"translate3d(\".concat(col * CELL_SIZE, \"px, \").concat(row * CELL_SIZE, \"px, 0px)\"),\n                            marginLeft: -100,\n                            marginTop: -100\n                        },\n                        onClick: {\n                            \"InfinitePannableGrid.useMemo[renderedCells]\": ()=>handleImageClick(img.slug)\n                        }[\"InfinitePannableGrid.useMemo[renderedCells]\"]\n                    }, \"\".concat(row, \",\").concat(col, \",\").concat(img.slug), false, {\n                        fileName: \"/Users/vitoatmo/Documents/GitHub/v0-unlimited-grid/components/infinite-pannable-grid.tsx\",\n                        lineNumber: 99,\n                        columnNumber: 11\n                    }, this));\n                }\n            }\n            return cells;\n        }\n    }[\"InfinitePannableGrid.useMemo[renderedCells]\"], [\n        images,\n        panOffset,\n        getVisibleIndices,\n        router,\n        isPanning\n    ]);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        ref: containerRef,\n        className: \"fixed inset-0 overflow-hidden bg-gray-50 select-none \".concat(isPanning ? \"cursor-grabbing\" : \"cursor-grab\"),\n        onPointerDown: handlePointerDown,\n        onPointerMove: handlePointerMove,\n        onPointerUp: handlePointerUp,\n        style: {\n            touchAction: \"none\"\n        },\n        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n            className: \"relative\",\n            style: {\n                width: \"100vw\",\n                height: \"100vh\",\n                transform: \"translate3d(\".concat(panOffset.x, \"px, \").concat(panOffset.y, \"px, 0)\"),\n                willChange: isPanning ? \"transform\" : \"auto\"\n            },\n            children: renderedCells\n        }, void 0, false, {\n            fileName: \"/Users/vitoatmo/Documents/GitHub/v0-unlimited-grid/components/infinite-pannable-grid.tsx\",\n            lineNumber: 125,\n            columnNumber: 7\n        }, this)\n    }, void 0, false, {\n        fileName: \"/Users/vitoatmo/Documents/GitHub/v0-unlimited-grid/components/infinite-pannable-grid.tsx\",\n        lineNumber: 117,\n        columnNumber: 5\n    }, this);\n}\n_s(InfinitePannableGrid, \"vMhOSbz/xwbH+KR4KCvJITUGz3k=\", false, function() {\n    return [\n        next_navigation__WEBPACK_IMPORTED_MODULE_2__.useRouter\n    ];\n});\n_c = InfinitePannableGrid;\nvar _c;\n$RefreshReg$(_c, \"InfinitePannableGrid\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2NvbXBvbmVudHMvaW5maW5pdGUtcGFubmFibGUtZ3JpZC50c3giLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFFMEU7QUFDOUI7QUFFeUI7QUFNckUsTUFBTU8sWUFBWTtBQUNsQixNQUFNQyxZQUFZO0FBQ2xCLE1BQU1DLGtCQUFrQjtBQUN4QixNQUFNQyxpQkFBaUIsR0FBRyw2QkFBNkI7QUFFaEQsU0FBU0MscUJBQXFCLEtBQXFDO1FBQXJDLEVBQUVDLE1BQU0sRUFBNkIsR0FBckM7O0lBQ25DLE1BQU1DLFNBQVNSLDBEQUFTQTtJQUN4QixNQUFNUyxlQUFlYiw2Q0FBTUEsQ0FBaUI7SUFFNUMsTUFBTSxDQUFDYyxXQUFXQyxhQUFhLEdBQUdoQiwrQ0FBUUEsQ0FBYztRQUFFaUIsR0FBRztRQUFHQyxHQUFHO0lBQUU7SUFDckUsTUFBTSxDQUFDQyxXQUFXQyxhQUFhLEdBQUdwQiwrQ0FBUUEsQ0FBQztJQUUzQyx3QkFBd0I7SUFDeEIsTUFBTXFCLFlBQVlwQiw2Q0FBTUEsQ0FBOEQ7SUFFdEYsdUJBQXVCO0lBQ3ZCQyxnREFBU0E7MENBQUM7WUFDUixJQUFJWSxhQUFhUSxPQUFPLEVBQUU7Z0JBQ3hCLE1BQU0sRUFBRUMsV0FBVyxFQUFFQyxZQUFZLEVBQUUsR0FBR1YsYUFBYVEsT0FBTztnQkFDMUROLGFBQWE7b0JBQ1hDLEdBQUdRLEtBQUtDLEtBQUssQ0FBQ0gsY0FBYztvQkFDNUJMLEdBQUdPLEtBQUtDLEtBQUssQ0FBQ0YsZUFBZTtnQkFDL0I7WUFDRjtRQUNGO3lDQUFHLEVBQUU7SUFFTCxNQUFNRyxvQkFBb0J4QixrREFBV0E7K0RBQUM7WUFDcEMsSUFBSSxDQUFDVyxhQUFhUSxPQUFPLEVBQUUsT0FBTztnQkFBRU0sUUFBUTtnQkFBR0MsUUFBUTtnQkFBR0MsUUFBUTtnQkFBR0MsUUFBUTtZQUFFO1lBQy9FLE1BQU0sRUFBRVIsV0FBVyxFQUFFQyxZQUFZLEVBQUUsR0FBR1YsYUFBYVEsT0FBTztZQUMxRCxN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QyxLQUFLSCxJQUFJSSxJQUFJO3dCQUNiQyxPQUFPOzRCQUNMQyxXQUFXLGVBQXFDVixPQUF0QkMsTUFBTS9DLFdBQVUsUUFBc0IsT0FBaEI4QyxNQUFNOUMsV0FBVTs0QkFDaEV5RCxZQUFZLENBQUM7NEJBQ2JDLFdBQVcsQ0FBQzt3QkFDZDt3QkFDQUMsT0FBTzsyRUFBRSxJQUFNbkIsaUJBQWlCVSxJQUFJVCxJQUFJOzt1QkFSbkMsR0FBVU0sT0FBUEQsS0FBSSxLQUFVSSxPQUFQSCxLQUFJLEtBQVksT0FBVEcsSUFBSVQsSUFBSTs7Ozs7Z0JBV3BDO1lBQ0Y7WUFDQSxPQUFPSTtRQUNUO3NEQUFHO1FBQUN4QztRQUFRRztRQUFXWTtRQUFtQmQ7UUFBUU07S0FBVTtJQUU1RCxxQkFDRSw4REFBQ2dEO1FBQ0NDLEtBQUt0RDtRQUNMdUQsV0FBVyx3REFBc0csT0FBOUNsRCxZQUFZLG9CQUFvQjtRQUNuR21ELGVBQWVyQztRQUNmc0MsZUFBZTlCO1FBQ2YrQixhQUFhMUI7UUFDYmdCLE9BQU87WUFBRVcsYUFBYTtRQUFPO2tCQUU3Qiw0RUFBQ047WUFDQ0UsV0FBVTtZQUNWUCxPQUFPO2dCQUNMWSxPQUFPO2dCQUNQQyxRQUFRO2dCQUNSWixXQUFXLGVBQWlDaEQsT0FBbEJBLFVBQVVFLENBQUMsRUFBQyxRQUFrQixPQUFaRixVQUFVRyxDQUFDLEVBQUM7Z0JBQ3hEMEQsWUFBWXpELFlBQVksY0FBYztZQUN4QztzQkFFQytCOzs7Ozs7Ozs7OztBQUlUO0dBekhnQnZDOztRQUNDTixzREFBU0E7OztLQURWTSIsInNvdXJjZXMiOlsiL1VzZXJzL3ZpdG9hdG1vL0RvY3VtZW50cy9HaXRIdWIvdjAtdW5saW1pdGVkLWdyaWQvY29tcG9uZW50cy9pbmZpbml0ZS1wYW5uYWJsZS1ncmlkLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBjbGllbnRcIjtcblxuaW1wb3J0IHsgdXNlU3RhdGUsIHVzZVJlZiwgdXNlRWZmZWN0LCB1c2VDYWxsYmFjaywgdXNlTWVtbyB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgdXNlUm91dGVyIH0gZnJvbSBcIm5leHQvbmF2aWdhdGlvblwiO1xuaW1wb3J0IHR5cGUgeyBJbWFnZUl0ZW0sIFBhblBvc2l0aW9uIH0gZnJvbSBcIkAvbGliL3R5cGVzXCI7XG5pbXBvcnQgeyBGbG9hdGluZ0dyaWRJbWFnZSB9IGZyb20gXCJAL2NvbXBvbmVudHMvZmxvYXRpbmctZ3JpZC1pbWFnZVwiO1xuXG5pbnRlcmZhY2UgSW5maW5pdGVQYW5uYWJsZUdyaWRQcm9wcyB7XG4gIGltYWdlczogSW1hZ2VJdGVtW107XG59XG5cbmNvbnN0IENFTExfU0laRSA9IDIyMDtcbmNvbnN0IEdSSURfQ09MUyA9IDU7XG5jb25zdCBWSUVXUE9SVF9CVUZGRVIgPSAyO1xuY29uc3QgRFJBR19USFJFU0hPTEQgPSA4OyAvLyBweCBiZWZvcmUgd2Ugc3RhcnQgcGFubmluZ1xuXG5leHBvcnQgZnVuY3Rpb24gSW5maW5pdGVQYW5uYWJsZUdyaWQoeyBpbWFnZXMgfTogSW5maW5pdGVQYW5uYWJsZUdyaWRQcm9wcykge1xuICBjb25zdCByb3V0ZXIgPSB1c2VSb3V0ZXIoKTtcbiAgY29uc3QgY29udGFpbmVyUmVmID0gdXNlUmVmPEhUTUxEaXZFbGVtZW50PihudWxsKTtcblxuICBjb25zdCBbcGFuT2Zmc2V0LCBzZXRQYW5PZmZzZXRdID0gdXNlU3RhdGU8UGFuUG9zaXRpb24+KHsgeDogMCwgeTogMCB9KTtcbiAgY29uc3QgW2lzUGFubmluZywgc2V0SXNQYW5uaW5nXSA9IHVzZVN0YXRlKGZhbHNlKTtcblxuICAvLyBGb3IgZHJhZy9jbGljayBpbnRlbnRcbiAgY29uc3QgZHJhZ1N0YXJ0ID0gdXNlUmVmPHsgeDogbnVtYmVyOyB5OiBudW1iZXI7IHBhblg6IG51bWJlcjsgcGFuWTogbnVtYmVyIH0gfCBudWxsPihudWxsKTtcblxuICAvLyBDZW50ZXIgZ3JpZCBvbiBtb3VudFxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChjb250YWluZXJSZWYuY3VycmVudCkge1xuICAgICAgY29uc3QgeyBjbGllbnRXaWR0aCwgY2xpZW50SGVpZ2h0IH0gPSBjb250YWluZXJSZWYuY3VycmVudDtcbiAgICAgIHNldFBhbk9mZnNldCh7XG4gICAgICAgIHg6IE1hdGgucm91bmQoY2xpZW50V2lkdGggLyAyKSxcbiAgICAgICAgeTogTWF0aC5yb3VuZChjbGllbnRIZWlnaHQgLyAyKSxcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwgW10pO1xuXG4gIGNvbnN0IGdldFZpc2libGVJbmRpY2VzID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIGlmICghY29udGFpbmVyUmVmLmN1cnJlbnQpIHJldHVybiB7IG1pblJvdzogMCwgbWF4Um93OiAwLCBtaW5Db2w6IDAsIG1heENvbDogMCB9O1xuICAgIGNvbnN0IHsgY2xpZW50V2lkdGgsIGNsaWVudEhlaWdodCB9ID0gY29udGFpbmVyUmVmLmN1cnJlbnQ7XG4gICAgY29uc3QgbWluQ29sID0gTWF0aC5mbG9vcigoLXBhbk9mZnNldC54IC0gVklFV1BPUlRfQlVGRkVSICogQ0VMTF9TSVpFKSAvIENFTExfU0laRSk7XG4gICAgY29uc3QgbWF4Q29sID0gTWF0aC5mbG9vcigoLXBhbk9mZnNldC54ICsgY2xpZW50V2lkdGggKyBWSUVXUE9SVF9CVUZGRVIgKiBDRUxMX1NJWkUpIC8gQ0VMTF9TSVpFKTtcbiAgICBjb25zdCBtaW5Sb3cgPSBNYXRoLmZsb29yKCgtcGFuT2Zmc2V0LnkgLSBWSUVXUE9SVF9CVUZGRVIgKiBDRUxMX1NJWkUpIC8gQ0VMTF9TSVpFKTtcbiAgICBjb25zdCBtYXhSb3cgPSBNYXRoLmZsb29yKCgtcGFuT2Zmc2V0LnkgKyBjbGllbnRIZWlnaHQgKyBWSUVXUE9SVF9CVUZGRVIgKiBDRUxMX1NJWkUpIC8gQ0VMTF9TSVpFKTtcbiAgICByZXR1cm4geyBtaW5Sb3csIG1heFJvdywgbWluQ29sLCBtYXhDb2wgfTtcbiAgfSwgW3Bhbk9mZnNldF0pO1xuXG4gIC8vIE9ubHkgc3RhcnQgcGFubmluZyBpZiBtb3ZlZCA+IHRocmVzaG9sZFxuICBjb25zdCBoYW5kbGVQb2ludGVyRG93biA9IHVzZUNhbGxiYWNrKChlOiBSZWFjdC5Qb2ludGVyRXZlbnQpID0+IHtcbiAgICBpZiAoZS5wb2ludGVyVHlwZSA9PT0gXCJtb3VzZVwiICYmIGUuYnV0dG9uICE9PSAwKSByZXR1cm47XG4gICAgZHJhZ1N0YXJ0LmN1cnJlbnQgPSB7XG4gICAgICB4OiBlLmNsaWVudFgsXG4gICAgICB5OiBlLmNsaWVudFksXG4gICAgICBwYW5YOiBwYW5PZmZzZXQueCxcbiAgICAgIHBhblk6IHBhbk9mZnNldC55LFxuICAgIH07XG4gICAgc2V0SXNQYW5uaW5nKGZhbHNlKTsgLy8gTm90IHBhbm5pbmcgdW50aWwgbW92ZWQgZW5vdWdoXG4gIH0sIFtwYW5PZmZzZXRdKTtcblxuICBjb25zdCBoYW5kbGVQb2ludGVyTW92ZSA9IHVzZUNhbGxiYWNrKChlOiBSZWFjdC5Qb2ludGVyRXZlbnQpID0+IHtcbiAgICBpZiAoIWRyYWdTdGFydC5jdXJyZW50KSByZXR1cm47XG4gICAgY29uc3QgZHggPSBlLmNsaWVudFggLSBkcmFnU3RhcnQuY3VycmVudC54O1xuICAgIGNvbnN0IGR5ID0gZS5jbGllbnRZIC0gZHJhZ1N0YXJ0LmN1cnJlbnQueTtcbiAgICBjb25zdCBkaXN0YW5jZSA9IE1hdGguc3FydChkeCAqIGR4ICsgZHkgKiBkeSk7XG5cbiAgICBpZiAoIWlzUGFubmluZyAmJiBkaXN0YW5jZSA+IERSQUdfVEhSRVNIT0xEKSB7XG4gICAgICBzZXRJc1Bhbm5pbmcodHJ1ZSk7XG4gICAgfVxuICAgIGlmIChpc1Bhbm5pbmcpIHtcbiAgICAgIHNldFBhbk9mZnNldCh7XG4gICAgICAgIHg6IGRyYWdTdGFydC5jdXJyZW50LnBhblggKyBkeCxcbiAgICAgICAgeTogZHJhZ1N0YXJ0LmN1cnJlbnQucGFuWSArIGR5LFxuICAgICAgfSk7XG4gICAgfVxuICB9LCBbaXNQYW5uaW5nXSk7XG5cbiAgY29uc3QgaGFuZGxlUG9pbnRlclVwID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIGRyYWdTdGFydC5jdXJyZW50ID0gbnVsbDtcbiAgICBzZXRJc1Bhbm5pbmcoZmFsc2UpO1xuICB9LCBbXSk7XG5cbiAgLy8gVGhlIG1hZ2ljOiBsZXQgdGhlIGltYWdlJ3Mgb25DbGljayBmaXJlIGluc3RhbnRseSAodW5sZXNzIHlvdSB3ZXJlIHBhbm5pbmcpXG4gIGNvbnN0IGhhbmRsZUltYWdlQ2xpY2sgPSAoc2x1Zzogc3RyaW5nKSA9PiB7XG4gICAgaWYgKCFpc1Bhbm5pbmcpIHtcbiAgICAgIHJvdXRlci5wdXNoKGAvaW1hZ2UvJHtzbHVnfWApO1xuICAgIH1cbiAgICAvLyBJZiB3YXMgcGFubmluZywgZG8gbm90aGluZyAoZG9uJ3Qgb3BlbiBkZXRhaWwpXG4gIH07XG5cbiAgY29uc3QgcmVuZGVyZWRDZWxscyA9IHVzZU1lbW8oKCkgPT4ge1xuICAgIGlmIChpbWFnZXMubGVuZ3RoID09PSAwKSByZXR1cm4gW107XG4gICAgY29uc3QgeyBtaW5Sb3csIG1heFJvdywgbWluQ29sLCBtYXhDb2wgfSA9IGdldFZpc2libGVJbmRpY2VzKCk7XG4gICAgY29uc3QgY2VsbHMgPSBbXTtcbiAgICBmb3IgKGxldCByb3cgPSBtaW5Sb3c7IHJvdyA8PSBtYXhSb3c7IHJvdysrKSB7XG4gICAgICBmb3IgKGxldCBjb2wgPSBtaW5Db2w7IGNvbCA8PSBtYXhDb2w7IGNvbCsrKSB7XG4gICAgICAgIGNvbnN0IGlkeCA9IE1hdGguYWJzKChyb3cgKiBHUklEX0NPTFMgKyBjb2wpKSAlIGltYWdlcy5sZW5ndGg7XG4gICAgICAgIGNvbnN0IGltZyA9IGltYWdlc1tpZHhdO1xuICAgICAgICBjZWxscy5wdXNoKFxuICAgICAgICAgIDxGbG9hdGluZ0dyaWRJbWFnZVxuICAgICAgICAgICAga2V5PXtgJHtyb3d9LCR7Y29sfSwke2ltZy5zbHVnfWB9XG4gICAgICAgICAgICBzcmM9e2ltZy5pbWFnZVVybH1cbiAgICAgICAgICAgIGFsdD17aW1nLm5hbWV9XG4gICAgICAgICAgICBzdHlsZT17e1xuICAgICAgICAgICAgICB0cmFuc2Zvcm06IGB0cmFuc2xhdGUzZCgke2NvbCAqIENFTExfU0laRX1weCwgJHtyb3cgKiBDRUxMX1NJWkV9cHgsIDBweClgLFxuICAgICAgICAgICAgICBtYXJnaW5MZWZ0OiAtMTAwLFxuICAgICAgICAgICAgICBtYXJnaW5Ub3A6IC0xMDAsXG4gICAgICAgICAgICB9fVxuICAgICAgICAgICAgb25DbGljaz17KCkgPT4gaGFuZGxlSW1hZ2VDbGljayhpbWcuc2x1Zyl9XG4gICAgICAgICAgLz5cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGNlbGxzO1xuICB9LCBbaW1hZ2VzLCBwYW5PZmZzZXQsIGdldFZpc2libGVJbmRpY2VzLCByb3V0ZXIsIGlzUGFubmluZ10pO1xuXG4gIHJldHVybiAoXG4gICAgPGRpdlxuICAgICAgcmVmPXtjb250YWluZXJSZWZ9XG4gICAgICBjbGFzc05hbWU9e2BmaXhlZCBpbnNldC0wIG92ZXJmbG93LWhpZGRlbiBiZy1ncmF5LTUwIHNlbGVjdC1ub25lICR7aXNQYW5uaW5nID8gXCJjdXJzb3ItZ3JhYmJpbmdcIiA6IFwiY3Vyc29yLWdyYWJcIn1gfVxuICAgICAgb25Qb2ludGVyRG93bj17aGFuZGxlUG9pbnRlckRvd259XG4gICAgICBvblBvaW50ZXJNb3ZlPXtoYW5kbGVQb2ludGVyTW92ZX1cbiAgICAgIG9uUG9pbnRlclVwPXtoYW5kbGVQb2ludGVyVXB9XG4gICAgICBzdHlsZT17eyB0b3VjaEFjdGlvbjogXCJub25lXCIgfX1cbiAgICA+XG4gICAgICA8ZGl2XG4gICAgICAgIGNsYXNzTmFtZT1cInJlbGF0aXZlXCJcbiAgICAgICAgc3R5bGU9e3tcbiAgICAgICAgICB3aWR0aDogXCIxMDB2d1wiLFxuICAgICAgICAgIGhlaWdodDogXCIxMDB2aFwiLFxuICAgICAgICAgIHRyYW5zZm9ybTogYHRyYW5zbGF0ZTNkKCR7cGFuT2Zmc2V0Lnh9cHgsICR7cGFuT2Zmc2V0Lnl9cHgsIDApYCxcbiAgICAgICAgICB3aWxsQ2hhbmdlOiBpc1Bhbm5pbmcgPyBcInRyYW5zZm9ybVwiIDogXCJhdXRvXCIsXG4gICAgICAgIH19XG4gICAgICA+XG4gICAgICAgIHtyZW5kZXJlZENlbGxzfVxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICk7XG59XG4iXSwibmFtZXMiOlsidXNlU3RhdGUiLCJ1c2VSZWYiLCJ1c2VFZmZlY3QiLCJ1c2VDYWxsYmFjayIsInVzZU1lbW8iLCJ1c2VSb3V0ZXIiLCJGbG9hdGluZ0dyaWRJbWFnZSIsIkNFTExfU0laRSIsIkdSSURfQ09MUyIsIlZJRVdQT1JUX0JVRkZFUiIsIkRSQUdfVEhSRVNIT0xEIiwiSW5maW5pdGVQYW5uYWJsZUdyaWQiLCJpbWFnZXMiLCJyb3V0ZXIiLCJjb250YWluZXJSZWYiLCJwYW5PZmZzZXQiLCJzZXRQYW5PZmZzZXQiLCJ4IiwieSIsImlzUGFubmluZyIsInNldElzUGFubmluZyIsImRyYWdTdGFydCIsImN1cnJlbnQiLCJjbGllbnRXaWR0aCIsImNsaWVudEhlaWdodCIsIk1hdGgiLCJyb3VuZCIsImdldFZpc2libGVJbmRpY2VzIiwibWluUm93IiwibWF4Um93IiwibWluQ29sIiwibWF4Q29sIiwiZmxvb3IiLCJoYW5kbGVQb2ludGVyRG93biIsImUiLCJwb2ludGVyVHlwZSIsImJ1dHRvbiIsImNsaWVudFgiLCJjbGllbnRZIiwicGFuWCIsInBhblkiLCJoYW5kbGVQb2ludGVyTW92ZSIsImR4IiwiZHkiLCJkaXN0YW5jZSIsInNxcnQiLCJoYW5kbGVQb2ludGVyVXAiLCJoYW5kbGVJbWFnZUNsaWNrIiwic2x1ZyIsInB1c2giLCJyZW5kZXJlZENlbGxzIiwibGVuZ3RoIiwiY2VsbHMiLCJyb3ciLCJjb2wiLCJpZHgiLCJhYnMiLCJpbWciLCJzcmMiLCJpbWFnZVVybCIsImFsdCIsIm5hbWUiLCJzdHlsZSIsInRyYW5zZm9ybSIsIm1hcmdpbkxlZnQiLCJtYXJnaW5Ub3AiLCJvbkNsaWNrIiwiZGl2IiwicmVmIiwiY2xhc3NOYW1lIiwib25Qb2ludGVyRG93biIsIm9uUG9pbnRlck1vdmUiLCJvblBvaW50ZXJVcCIsInRvdWNoQWN0aW9uIiwid2lkdGgiLCJoZWlnaHQiLCJ3aWxsQ2hhbmdlIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./components/infinite-pannable-grid.tsx\n"));

/***/ })

});