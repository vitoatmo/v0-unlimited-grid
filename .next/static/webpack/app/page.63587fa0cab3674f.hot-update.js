// .next/static/webpack/app/page.63587fa0cab3674f.hot-update.js

"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./components/infinite-pannable-grid.tsx":
/*!***********************************************!*\
  !*** ./components/infinite-pannable-grid.tsx ***!
  \***********************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   InfinitePannableGrid: () => (/* binding */ InfinitePannableGrid)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var next_image__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/image */ \"(app-pages-browser)/./node_modules/next/dist/api/image.js\");\n/* harmony import */ var next_navigation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! next/navigation */ \"(app-pages-browser)/./node_modules/next/dist/api/navigation.js\");\n/* __next_internal_client_entry_do_not_use__ InfinitePannableGrid auto */ \nvar _s = $RefreshSig$();\n\n\n\nconst CELL_SIZE = 220;\nconst GRID_COLS = 5;\nconst VIEWPORT_BUFFER = 2;\nconst VIRTUAL_GRID_SIZE = 100000;\nconst VIRTUAL_GRID_CENTER = Math.floor(VIRTUAL_GRID_SIZE / 2);\nfunction InfinitePannableGrid(param) {\n    let { images } = param;\n    _s();\n    const router = (0,next_navigation__WEBPACK_IMPORTED_MODULE_3__.useRouter)();\n    const containerRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    // Pan state, initialized after viewport is known\n    const [panOffset, setPanOffset] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [isPanning, setIsPanning] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [startPoint, setStartPoint] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        x: 0,\n        y: 0\n    });\n    // Center the grid on initial mount\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useLayoutEffect)({\n        \"InfinitePannableGrid.useLayoutEffect\": ()=>{\n            if (containerRef.current && panOffset === null) {\n                const { clientWidth, clientHeight } = containerRef.current;\n                const initialX = clientWidth / 2 - VIRTUAL_GRID_CENTER * CELL_SIZE;\n                const initialY = clientHeight / 2 - VIRTUAL_GRID_CENTER * CELL_SIZE;\n                setPanOffset({\n                    x: initialX,\n                    y: initialY\n                });\n            }\n        }\n    }[\"InfinitePannableGrid.useLayoutEffect\"], [\n        panOffset\n    ]);\n    // Calculate which grid cells are visible in the viewport\n    const getVisibleIndices = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"InfinitePannableGrid.useCallback[getVisibleIndices]\": ()=>{\n            if (!containerRef.current || panOffset === null) return {\n                minRow: 0,\n                maxRow: 0,\n                minCol: 0,\n                maxCol: 0\n            };\n            const { clientWidth, clientHeight } = containerRef.current;\n            const leftEdge = -panOffset.x - VIEWPORT_BUFFER * CELL_SIZE;\n            const rightEdge = -panOffset.x + clientWidth + VIEWPORT_BUFFER * CELL_SIZE;\n            const topEdge = -panOffset.y - VIEWPORT_BUFFER * CELL_SIZE;\n            const bottomEdge = -panOffset.y + clientHeight + VIEWPORT_BUFFER * CELL_SIZE;\n            const minCol = Math.floor(leftEdge / CELL_SIZE);\n            const maxCol = Math.ceil(rightEdge / CELL_SIZE);\n            const minRow = Math.floor(topEdge / CELL_SIZE);\n            const maxRow = Math.ceil(bottomEdge / CELL_SIZE);\n            return {\n                minRow,\n                maxRow,\n                minCol,\n                maxCol\n            };\n        }\n    }[\"InfinitePannableGrid.useCallback[getVisibleIndices]\"], [\n        panOffset\n    ]);\n    // Pan/drag handlers for container only\n    const handlePointerDown = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"InfinitePannableGrid.useCallback[handlePointerDown]\": (e)=>{\n            if (e.pointerType === \"mouse\" && e.button !== 0) return;\n            setIsPanning(true);\n            var _panOffset_x, _panOffset_y;\n            setStartPoint({\n                x: e.clientX - ((_panOffset_x = panOffset === null || panOffset === void 0 ? void 0 : panOffset.x) !== null && _panOffset_x !== void 0 ? _panOffset_x : 0),\n                y: e.clientY - ((_panOffset_y = panOffset === null || panOffset === void 0 ? void 0 : panOffset.y) !== null && _panOffset_y !== void 0 ? _panOffset_y : 0)\n            });\n            if (containerRef.current) {\n                containerRef.current.setPointerCapture(e.pointerId);\n            }\n        }\n    }[\"InfinitePannableGrid.useCallback[handlePointerDown]\"], [\n        panOffset\n    ]);\n    const handlePointerMove = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"InfinitePannableGrid.useCallback[handlePointerMove]\": (e)=>{\n            if (!isPanning || panOffset === null) return;\n            setPanOffset({\n                x: e.clientX - startPoint.x,\n                y: e.clientY - startPoint.y\n            });\n        }\n    }[\"InfinitePannableGrid.useCallback[handlePointerMove]\"], [\n        isPanning,\n        startPoint,\n        panOffset\n    ]);\n    const handlePointerUp = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"InfinitePannableGrid.useCallback[handlePointerUp]\": (e)=>{\n            setIsPanning(false);\n            if (containerRef.current) {\n                containerRef.current.releasePointerCapture(e.pointerId);\n            }\n        }\n    }[\"InfinitePannableGrid.useCallback[handlePointerUp]\"], []);\n    // Render only visible cells, tiling images infinitely using modulo\n    const renderedCells = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)({\n        \"InfinitePannableGrid.useMemo[renderedCells]\": ()=>{\n            if (panOffset === null) return null;\n            const { minRow, maxRow, minCol, maxCol } = getVisibleIndices();\n            const cells = [];\n            for(let row = minRow; row <= maxRow; row++){\n                for(let col = minCol; col <= maxCol; col++){\n                    const flatIdx = ((row * GRID_COLS + col) % images.length + images.length) % images.length;\n                    const img = images[flatIdx];\n                    cells.push(/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"absolute transition-all duration-200\",\n                        style: {\n                            left: \"\".concat(col * CELL_SIZE, \"px\"),\n                            top: \"\".concat(row * CELL_SIZE, \"px\"),\n                            width: \"\".concat(CELL_SIZE, \"px\"),\n                            height: \"\".concat(CELL_SIZE, \"px\")\n                        },\n                        tabIndex: 0,\n                        role: \"button\",\n                        \"aria-label\": \"View details of \".concat(img.name),\n                        // Click always navigates. No pan/click block.\n                        onClick: {\n                            \"InfinitePannableGrid.useMemo[renderedCells]\": ()=>router.push(\"/image/\".concat(img.slug))\n                        }[\"InfinitePannableGrid.useMemo[renderedCells]\"],\n                        onKeyDown: {\n                            \"InfinitePannableGrid.useMemo[renderedCells]\": (e)=>{\n                                if (e.key === \"Enter\" || e.key === \" \") {\n                                    router.push(\"/image/\".concat(img.slug));\n                                }\n                            }\n                        }[\"InfinitePannableGrid.useMemo[renderedCells]\"],\n                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: \"w-full h-full bg-white overflow-hidden transition-transform duration-300 hover:scale-105 cursor-pointer p-4 select-none\",\n                            children: [\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                    className: \"aspect-square relative mb-3\",\n                                    children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(next_image__WEBPACK_IMPORTED_MODULE_2__[\"default\"], {\n                                        src: img.imageUrl || \"/placeholder.svg\",\n                                        alt: img.name,\n                                        fill: true,\n                                        className: \"object-cover\",\n                                        sizes: \"220px\",\n                                        draggable: false,\n                                        loading: \"lazy\"\n                                    }, void 0, false, {\n                                        fileName: \"/Users/vitoatmo/Documents/GitHub/v0-unlimited-grid/components/infinite-pannable-grid.tsx\",\n                                        lineNumber: 121,\n                                        columnNumber: 17\n                                    }, this)\n                                }, void 0, false, {\n                                    fileName: \"/Users/vitoatmo/Documents/GitHub/v0-unlimited-grid/components/infinite-pannable-grid.tsx\",\n                                    lineNumber: 120,\n                                    columnNumber: 15\n                                }, this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                    children: [\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h3\", {\n                                            className: \"font-medium text-gray-900 text-sm truncate mb-1\",\n                                            children: img.name\n                                        }, void 0, false, {\n                                            fileName: \"/Users/vitoatmo/Documents/GitHub/v0-unlimited-grid/components/infinite-pannable-grid.tsx\",\n                                            lineNumber: 132,\n                                            columnNumber: 17\n                                        }, this),\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                            className: \"flex gap-1\",\n                                            children: (img.tags || []).slice(0, 2).map({\n                                                \"InfinitePannableGrid.useMemo[renderedCells]\": (tag)=>/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                                        className: \"text-xs text-gray-500 bg-gray-100 px-2 py-0.5 rounded\",\n                                                        children: tag\n                                                    }, tag, false, {\n                                                        fileName: \"/Users/vitoatmo/Documents/GitHub/v0-unlimited-grid/components/infinite-pannable-grid.tsx\",\n                                                        lineNumber: 135,\n                                                        columnNumber: 21\n                                                    }, this)\n                                            }[\"InfinitePannableGrid.useMemo[renderedCells]\"])\n                                        }, void 0, false, {\n                                            fileName: \"/Users/vitoatmo/Documents/GitHub/v0-unlimited-grid/components/infinite-pannable-grid.tsx\",\n                                            lineNumber: 133,\n                                            columnNumber: 17\n                                        }, this)\n                                    ]\n                                }, void 0, true, {\n                                    fileName: \"/Users/vitoatmo/Documents/GitHub/v0-unlimited-grid/components/infinite-pannable-grid.tsx\",\n                                    lineNumber: 131,\n                                    columnNumber: 15\n                                }, this)\n                            ]\n                        }, void 0, true, {\n                            fileName: \"/Users/vitoatmo/Documents/GitHub/v0-unlimited-grid/components/infinite-pannable-grid.tsx\",\n                            lineNumber: 119,\n                            columnNumber: 13\n                        }, this)\n                    }, \"\".concat(row, \"-\").concat(col), false, {\n                        fileName: \"/Users/vitoatmo/Documents/GitHub/v0-unlimited-grid/components/infinite-pannable-grid.tsx\",\n                        lineNumber: 99,\n                        columnNumber: 11\n                    }, this));\n                }\n            }\n            return cells;\n        }\n    }[\"InfinitePannableGrid.useMemo[renderedCells]\"], [\n        images,\n        panOffset,\n        getVisibleIndices,\n        router\n    ]);\n    // Prevent browser scroll on arrows/space\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useLayoutEffect)({\n        \"InfinitePannableGrid.useLayoutEffect\": ()=>{\n            const preventScroll = {\n                \"InfinitePannableGrid.useLayoutEffect.preventScroll\": (e)=>{\n                    if ([\n                        \"ArrowUp\",\n                        \"ArrowDown\",\n                        \"ArrowLeft\",\n                        \"ArrowRight\",\n                        \" \"\n                    ].includes(e.key)) {\n                        e.preventDefault();\n                    }\n                }\n            }[\"InfinitePannableGrid.useLayoutEffect.preventScroll\"];\n            window.addEventListener(\"keydown\", preventScroll, {\n                passive: false\n            });\n            return ({\n                \"InfinitePannableGrid.useLayoutEffect\": ()=>window.removeEventListener(\"keydown\", preventScroll)\n            })[\"InfinitePannableGrid.useLayoutEffect\"];\n        }\n    }[\"InfinitePannableGrid.useLayoutEffect\"], []);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        ref: containerRef,\n        className: \"fixed inset-0 overflow-hidden bg-gray-50 select-none \".concat(isPanning ? \"cursor-grabbing\" : \"cursor-grab\"),\n        onPointerDown: handlePointerDown,\n        onPointerMove: handlePointerMove,\n        onPointerUp: handlePointerUp,\n        style: {\n            touchAction: \"none\"\n        },\n        children: panOffset !== null && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n            className: \"relative\",\n            style: {\n                width: VIRTUAL_GRID_SIZE * CELL_SIZE,\n                height: VIRTUAL_GRID_SIZE * CELL_SIZE,\n                transform: \"translate3d(\".concat(panOffset.x, \"px, \").concat(panOffset.y, \"px, 0)\"),\n                willChange: isPanning ? \"transform\" : \"auto\"\n            },\n            children: renderedCells\n        }, void 0, false, {\n            fileName: \"/Users/vitoatmo/Documents/GitHub/v0-unlimited-grid/components/infinite-pannable-grid.tsx\",\n            lineNumber: 170,\n            columnNumber: 9\n        }, this)\n    }, void 0, false, {\n        fileName: \"/Users/vitoatmo/Documents/GitHub/v0-unlimited-grid/components/infinite-pannable-grid.tsx\",\n        lineNumber: 161,\n        columnNumber: 5\n    }, this);\n}\n_s(InfinitePannableGrid, \"NEvVYTYlQjXj6jmFmnjHCkhpaq4=\", false, function() {\n    return [\n        next_navigation__WEBPACK_IMPORTED_MODULE_3__.useRouter\n    ];\n});\n_c = InfinitePannableGrid;\nvar _c;\n$RefreshReg$(_c, \"InfinitePannableGrid\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./components/infinite-pannable-grid.tsx\n"));

/***/ })

});