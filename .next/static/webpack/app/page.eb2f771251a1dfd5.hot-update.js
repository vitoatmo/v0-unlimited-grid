"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./components/infinite-pannable-grid.tsx":
/*!***********************************************!*\
  !*** ./components/infinite-pannable-grid.tsx ***!
  \***********************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   InfinitePannableGrid: () => (/* binding */ InfinitePannableGrid)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var next_navigation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/navigation */ \"(app-pages-browser)/./node_modules/next/dist/api/navigation.js\");\n/* harmony import */ var _components_floating_grid_image__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/components/floating-grid-image */ \"(app-pages-browser)/./components/floating-grid-image.tsx\");\n/* __next_internal_client_entry_do_not_use__ InfinitePannableGrid auto */ \nvar _s = $RefreshSig$();\n\n\n\nconst CELL_SIZE = 220;\nconst GRID_COLS = 5;\nconst VIEWPORT_BUFFER = 2;\nconst DRAG_THRESHOLD = 8; // px before we start panning\nfunction InfinitePannableGrid(param) {\n    let { images, panOffset, setPanOffset } = param;\n    _s();\n    const router = (0,next_navigation__WEBPACK_IMPORTED_MODULE_2__.useRouter)();\n    const searchParams = (0,next_navigation__WEBPACK_IMPORTED_MODULE_2__.useSearchParams)();\n    const paramString = searchParams === null || searchParams === void 0 ? void 0 : searchParams.toString();\n    const containerRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const isPanningRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(false);\n    const dragStart = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    // Center grid on mount ONLY if panOffset is {0,0}\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"InfinitePannableGrid.useEffect\": ()=>{\n            if (containerRef.current && panOffset.x === 0 && panOffset.y === 0) {\n                const { clientWidth, clientHeight } = containerRef.current;\n                setPanOffset({\n                    x: Math.round(clientWidth / 2),\n                    y: Math.round(clientHeight / 2)\n                });\n            }\n        // eslint-disable-next-line\n        }\n    }[\"InfinitePannableGrid.useEffect\"], []);\n    const getVisibleIndices = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"InfinitePannableGrid.useCallback[getVisibleIndices]\": ()=>{\n            if (!containerRef.current) return {\n                minRow: 0,\n                maxRow: 0,\n                minCol: 0,\n                maxCol: 0\n            };\n            const { clientWidth, clientHeight } = containerRef.current;\n            const minCol = Math.floor((-panOffset.x - VIEWPORT_BUFFER * CELL_SIZE) / CELL_SIZE);\n            const maxCol = Math.floor((-panOffset.x + clientWidth + VIEWPORT_BUFFER * CELL_SIZE) / CELL_SIZE);\n            const minRow = Math.floor((-panOffset.y - VIEWPORT_BUFFER * CELL_SIZE) / CELL_SIZE);\n            const maxRow = Math.floor((-panOffset.y + clientHeight + VIEWPORT_BUFFER * CELL_SIZE) / CELL_SIZE);\n            return {\n                minRow,\n                maxRow,\n                minCol,\n                maxCol\n            };\n        }\n    }[\"InfinitePannableGrid.useCallback[getVisibleIndices]\"], [\n        panOffset\n    ]);\n    // Only start panning if moved > threshold\n    const handlePointerDown = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"InfinitePannableGrid.useCallback[handlePointerDown]\": (e)=>{\n            if (e.pointerType === \"mouse\" && e.button !== 0) return;\n            dragStart.current = {\n                x: e.clientX,\n                y: e.clientY,\n                panX: panOffset.x,\n                panY: panOffset.y\n            };\n            isPanningRef.current = false; // Not panning until moved enough\n        }\n    }[\"InfinitePannableGrid.useCallback[handlePointerDown]\"], [\n        panOffset\n    ]);\n    const handlePointerMove = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"InfinitePannableGrid.useCallback[handlePointerMove]\": (e)=>{\n            if (!dragStart.current) return;\n            const dx = e.clientX - dragStart.current.x;\n            const dy = e.clientY - dragStart.current.y;\n            const distance = Math.sqrt(dx * dx + dy * dy);\n            if (!isPanningRef.current && distance > DRAG_THRESHOLD) {\n                isPanningRef.current = true;\n            }\n            if (isPanningRef.current) {\n                setPanOffset({\n                    x: dragStart.current.panX + dx,\n                    y: dragStart.current.panY + dy\n                });\n            }\n        }\n    }[\"InfinitePannableGrid.useCallback[handlePointerMove]\"], [\n        setPanOffset\n    ]);\n    const handlePointerUp = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"InfinitePannableGrid.useCallback[handlePointerUp]\": ()=>{\n            dragStart.current = null;\n            isPanningRef.current = false;\n        }\n    }[\"InfinitePannableGrid.useCallback[handlePointerUp]\"], []);\n    // Always pass params to detail page\n    const handleImageClick = (slug)=>{\n        const href = paramString ? \"/image/\".concat(slug, \"?\").concat(paramString) : \"/image/\".concat(slug);\n        router.push(href);\n    };\n    const renderedCells = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)({\n        \"InfinitePannableGrid.useMemo[renderedCells]\": ()=>{\n            if (images.length === 0) return [];\n            const { minRow, maxRow, minCol, maxCol } = getVisibleIndices();\n            const cells = [];\n            for(let row = minRow; row <= maxRow; row++){\n                for(let col = minCol; col <= maxCol; col++){\n                    const idx = Math.abs(row * GRID_COLS + col) % images.length;\n                    const img = images[idx];\n                    cells.push(/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_floating_grid_image__WEBPACK_IMPORTED_MODULE_3__.FloatingGridImage, {\n                        src: img.imageUrl,\n                        alt: img.name,\n                        style: {\n                            transform: \"translate3d(\".concat(col * CELL_SIZE, \"px, \").concat(row * CELL_SIZE, \"px, 0px)\"),\n                            marginLeft: -100,\n                            marginTop: -100\n                        },\n                        onClick: {\n                            \"InfinitePannableGrid.useMemo[renderedCells]\": ()=>handleImageClick(img.slug)\n                        }[\"InfinitePannableGrid.useMemo[renderedCells]\"]\n                    }, \"\".concat(row, \",\").concat(col, \",\").concat(img.slug), false, {\n                        fileName: \"/Users/vitoatmo/Documents/GitHub/v0-unlimited-grid/components/infinite-pannable-grid.tsx\",\n                        lineNumber: 105,\n                        columnNumber: 11\n                    }, this));\n                }\n            }\n            return cells;\n        }\n    }[\"InfinitePannableGrid.useMemo[renderedCells]\"], [\n        images,\n        panOffset,\n        getVisibleIndices,\n        router,\n        paramString\n    ]);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        ref: containerRef,\n        className: \"fixed inset-0 overflow-hidden bg-gray-50 select-none\",\n        onPointerDown: handlePointerDown,\n        onPointerMove: handlePointerMove,\n        onPointerUp: handlePointerUp,\n        style: {\n            touchAction: \"none\",\n            cursor: isPanningRef.current ? \"grabbing\" : \"grab\"\n        },\n        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n            className: \"relative\",\n            style: {\n                width: \"100vw\",\n                height: \"100vh\",\n                transform: \"translate3d(\".concat(panOffset.x, \"px, \").concat(panOffset.y, \"px, 0)\"),\n                willChange: isPanningRef.current ? \"transform\" : \"auto\"\n            },\n            children: renderedCells\n        }, void 0, false, {\n            fileName: \"/Users/vitoatmo/Documents/GitHub/v0-unlimited-grid/components/infinite-pannable-grid.tsx\",\n            lineNumber: 131,\n            columnNumber: 7\n        }, this)\n    }, void 0, false, {\n        fileName: \"/Users/vitoatmo/Documents/GitHub/v0-unlimited-grid/components/infinite-pannable-grid.tsx\",\n        lineNumber: 123,\n        columnNumber: 5\n    }, this);\n}\n_s(InfinitePannableGrid, \"o/0hUSMxoid/ReU9M1H1/CGC5vI=\", false, function() {\n    return [\n        next_navigation__WEBPACK_IMPORTED_MODULE_2__.useRouter,\n        next_navigation__WEBPACK_IMPORTED_MODULE_2__.useSearchParams\n    ];\n});\n_c = InfinitePannableGrid;\nvar _c;\n$RefreshReg$(_c, \"InfinitePannableGrid\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./components/infinite-pannable-grid.tsx\n"));

/***/ })

});